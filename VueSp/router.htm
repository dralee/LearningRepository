<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>vue-router</title>
	<script src="js/vue.js"></script>
	<script src="js/vue-router.js"></script>
</head>
<body>
	<div id="app">
		<h1>Hello App!</h1>
		<p>
			<!-- 使用router-link组件来导航-->
			<!-- 通过传入`to`属性指定链接-->
			<!-- <router-link>默认被渲染成一个`<a>`标签 -->
			<router-link to="/foo">Go to foo</router-link>
			<router-link to="/bar">Go to bar</router-link>
		</p>
		<!-- 路由出口-->
		<!-- 路由匹配到的组件将渲染在此-->
		<router-view></router-view>
	</div>
	<script>
	 // 0.如使用模块化机制编程，导入Vue及VueRouter，需要调用Vue.use(VueRouter)
	 // 1.定义（路由）组件
	 // 可从其他文件 import 进来
	 const Foo = {template: '<div>foo</div>'}
	 const Bar = {template: '<div>bar</div>'}
	 
	 // 2.定义路由
	 // 每个路由应该映射一个组件。其中“component”可以是通过Vue.extend()创建的组件构造器，
	 // 或，只是一个组件配置对象。
	 const routes = [
		{path: '/foo', component:Foo},
		{path: '/bar', component:Bar}
	 ]
	 
	 // 3.创建router实例，传入`routes`配置
	 // 可传别的配置参数
	 const router = new VueRouter({
		routes // 简写，相当于routes:routes
	 })
	 
	 // 4.创建和挂载根实例
	 // 要通过router配置参数注入路由，从而让整个应用都有路由功能
	 const app = new Vue({
		router
	 }).$mount('#app')
	 
	 // 现在，应用已启动了
	</script>
</body>
</html>
































